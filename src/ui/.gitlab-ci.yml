---
image: alpine:latest

stages:
  - test
  - build
  - review
  - release
  - cleanup
  - deploy

variables:
  DIND: docker:18.09.7-dind
  CI_REGISTRY: 'index.docker.io'
  CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
  DOCKER_HOST: tcp://localhost:2375/
before_script:
  - CI_APPLICATION_REPOSITORY=$(echo "$CI_REGISTRY/$CI_REGISTRY_USER/$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]')


test:
  stage: test
  image: python:3.6-alpine
  script:
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage xml --include ui/ui.py
  artifacts:
    reports:
      coverage_report: 
        coverage_format: cobertura
        path: coverage.xml
  only:
    - branches

build:
  stage: build
  only:
    - branches
  image: docker:git
  services:
    - $DIND
  script:
    - docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    - echo "Logging to GitLab Container Registry with CI credentials...for build"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - echo "Pushing to GitLab Container Registry..."
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"


# release:
#   stage: release
#   image: docker
#   services:
#     - docker:18.09.7-dind
#   variables:
#     CI_REGISTRY: 'index.docker.io'
#     CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_PROJECT_PATH
#     CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
#     CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
#   before_script:
#     - >
#       if ! docker info &>/dev/null; then
#         if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
#           export DOCKER_HOST='tcp://localhost:2375'
#         fi
#       fi
#   script:
#     # Releasing
#     - echo "Updating docker images ..."
#     - >
#       if [[ -n "$CI_REGISTRY_USER" ]]; then
#         echo "Logging to GitLab Container Registry with CI credentials for release..."
#         docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
#       fi
#     - docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
#     - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
#     - docker push "$CI_APPLICATION_REPOSITORY:latest"
#   only:
#     - main

# deploy:
#   stage: deploy
#   trigger:
#     project: yunusovtr/reddit-deploy
#   only:
#     - master

# review:
#   stage: review
#   variables:
#     host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
#     TILLER_NAMESPACE: kube-system
#     CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
#     name: $CI_ENVIRONMENT_SLUG
#   environment:
#     name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
#     url: http://$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
#     on_stop: stop_review
#   only:
#     refs:
#       - branches
#   except:
#     - master
#   before_script:
#     # installing dependencies
#     - apk add -U openssl curl tar gzip bash ca-certificates git
#     - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
#     - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
#     - apk add glibc-2.23-r3.apk
#     - curl https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C $HOME
#     - export PATH=${PATH}:$HOME/gsutil
#     - curl https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz | tar zx
#     - mv linux-amd64/helm /usr/bin/
#     - helm version
#     - curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
#     - chmod a+x /usr/bin/sync-repo.sh
#     - curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
#     - chmod +x /usr/bin/kubectl
#     - kubectl version --client
#     - kubectl config get-contexts
#     - kubectl config use-context $(kubectl config get-contexts | tail -n +2 | head -n 1 | awk '{print $1};')
#     # ensuring namespace
#     - kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
#   script:
#     - export track="${1-stable}"
#     - >
#       if [[ "$track" != "stable" ]]; then
#         name="$name-$track"
#       fi
#     - echo "Clone deploy repository..."
#     - git clone $CI_SERVER_URL/$CI_PROJECT_NAMESPACE/reddit-deploy.git
#     - echo "Download helm dependencies..."
#     - helm dep update reddit-deploy/reddit
#     - echo "Deploy helm release $name to $KUBE_NAMESPACE"
#     - echo "Upgrading existing release..."
#     - echo "helm upgrade --install --wait --set ui.ingress.host="$host" --set $CI_PROJECT_NAME.image.tag="$CI_APPLICATION_TAG" --namespace="$KUBE_NAMESPACE" --version="$CI_PIPELINE_ID-$CI_JOB_ID" "$name" reddit-deploy/reddit/"
#     - >
#       helm upgrade \
#         --install \
#         --wait \
#         --set ui.ingress.host="$host" \
#         --set $CI_PROJECT_NAME.image.tag="$CI_APPLICATION_TAG" \
#         --namespace="$KUBE_NAMESPACE" \
#         --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
#         "$name" \
#         reddit-deploy/reddit/

# stop_review:
#   stage: cleanup
#   variables:
#     GIT_STRATEGY: none
#     name: $CI_ENVIRONMENT_SLUG
#   environment:
#     name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
#     action: stop
#   when: manual
#   allow_failure: true
#   only:
#     refs:
#       - branches
#   except:
#     - master
#   before_script:
#     # installing dependencies
#     - apk add -U openssl curl tar gzip bash ca-certificates git
#     - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
#     - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
#     - apk add glibc-2.23-r3.apk
#     - curl https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C $HOME
#     - export PATH=${PATH}:$HOME/gsutil
#     - curl https://get.helm.sh/helm-v3.9.2-linux-amd64.tar.gz | tar zx
#     - mv linux-amd64/helm /usr/bin/
#     - helm version
#     - curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
#     - chmod a+x /usr/bin/sync-repo.sh
#     - curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
#     - chmod +x /usr/bin/kubectl
#     - kubectl version --client
#     - kubectl config get-contexts
#     - kubectl config use-context $(kubectl config get-contexts | tail -n +2 | head -n 1 | awk '{print $1};')
#   script:
#     - helm delete "$name" -n "$KUBE_NAMESPACE"
