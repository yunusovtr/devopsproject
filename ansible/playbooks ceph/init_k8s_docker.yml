---
- hosts: nodes
  become: yes
  tasks:

    - name: Set timezone to MSK
      timezone:
        name: Europe/Moscow
  
    - name: Make the Swap inactive
      command: swapoff -a

    - name: Remove Swap entry from /etc/fstab.
      lineinfile:
        dest: /etc/fstab
        regexp: swap
        state: absent
    
    - name: Update apt cache
      become: yes
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      become: yes
      apt: upgrade=dist

    - name: Installing Prerequisites for Kubernetes
      apt: 
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - vim
          - software-properties-common
        state: present

    - name: Add Dockerâ€™s official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        filename: docker
        mode: 0600

    - name: Install Docker Engine.
      apt: 
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - mc
          - jq
          - gparted
        state: present

    - name: Add user to docker group
      user:
        name: "{{ansible_user}}"
        group: docker

    - name: install python dependencies
      apt:
        update_cache: yes
        state: latest
        name: python3-pip
    
    - name: install 'Docker SDK for Python'
      pip:
        name:
          - docker
          - docker-compose

    - name: Enable service docker, and enable persistently
      service: 
        name: docker
        enabled: yes

    - name: Add Google official GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
        state: present
        filename: kubernetes
        mode: 0600

    - name: Installing Kubernetes Cluster Packages.
      apt: 
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present

    - name: Enable service kubelet, and enable persistently
      service: 
        name: kubelet
        enabled: yes

    - name: Reboot all the kubernetes nodes.
      reboot:
        post_reboot_delay: 10
        reboot_timeout: 40
        connect_timeout: 60
        test_command: uptime

    - pause: seconds=20

- hosts: masters
  become: yes
  tags: after
  vars:
    pod_network_cidr: 192.168.100.0/24
    pod_network_manifest_file: https://projectcalico.docs.tigera.io/v3.23/manifests/calico.yaml
    rbac_manifest_file: https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
    k8s_master_ip: "{{ local_ip}}"

  tasks:
    - name: Intilizing Kubernetes Cluster
      command: kubeadm init --pod-network-cidr "{{ pod_network_cidr }}"  --apiserver-advertise-address "{{ k8s_master_ip }}"
      run_once: true

    - pause: seconds=30

    - name: Create directory for kube config.
      file: 
        path: /home/{{ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy /etc/kubernetes/admin.conf to user home directory /home/{{ ansible_user }}/.kube/config.
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - pause: seconds=10

    - name: Remove the cache directory.
      file: 
        path: /home/{{ ansible_user }}/.kube/cache
        state: absent

    - name: Create Pod Network & RBAC.
      command: "{{ item }}"
      with_items: 
          - kubectl apply -f {{ pod_network_manifest_file }}
          - kubectl apply -f {{ rbac_manifest_file }}

    - pause: seconds=30

    - name: Get the token for joining the nodes with Kuberentes master.
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - debug:
        msg: "{{ kubernetes_join_command.stdout }}"

    - name: Copy join command to local file.
      become: false
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

- hosts: workers
  tags: after
  become: yes    
  tasks:
    - name: Copy join command to worker nodes.
      copy:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: 0777   

    - name: Join the Worker nodes with the master.
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not

    - debug:
        msg: "{{ joined_or_not.stdout }}"

- hosts: masters
  tags: after
  become: yes
  tasks:
    - name: Configure kubectl command auto-completion.
      lineinfile:
        dest: /home/{{ ansible_user }}/.bashrc
        line: 'source <(kubectl completion bash)'
        insertafter: EOF
